

/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* eslint-disable quotes */
// file generated by ./scripts/updateRuntimeDependencies.js


export const dayjs = "/// <reference path=\"./locale/index.d.ts\" />\n\nexport = dayjs;\n\ndeclare function dayjs (date?: dayjs.ConfigType): dayjs.Dayjs\n\ndeclare function dayjs (date?: dayjs.ConfigType, format?: dayjs.OptionType, strict?: boolean): dayjs.Dayjs\n\ndeclare function dayjs (date?: dayjs.ConfigType, format?: dayjs.OptionType, locale?: string, strict?: boolean): dayjs.Dayjs\n\ndeclare namespace dayjs {\n  interface ConfigTypeMap {\n    default: string | number | Date | Dayjs | null | undefined\n  }\n\n  export type ConfigType = ConfigTypeMap[keyof ConfigTypeMap]\n\n  export interface FormatObject { locale?: string, format?: string, utc?: boolean }\n\n  export type OptionType = FormatObject | string | string[]\n\n  export type UnitTypeShort = 'd' | 'D' | 'M' | 'y' | 'h' | 'm' | 's' | 'ms'\n\n  export type UnitTypeLong = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'month' | 'year' | 'date'\n\n  export type UnitTypeLongPlural = 'milliseconds' | 'seconds' | 'minutes' | 'hours' | 'days' | 'months' | 'years' | 'dates'\n  \n  export type UnitType = UnitTypeLong | UnitTypeLongPlural | UnitTypeShort;\n\n  export type OpUnitType = UnitType | \"week\" | \"weeks\" | 'w';\n  export type QUnitType = UnitType | \"quarter\" | \"quarters\" | 'Q';\n  export type ManipulateType = Exclude<OpUnitType, 'date' | 'dates'>;\n  class Dayjs {\n    constructor (config?: ConfigType)\n    /**\n     * All Day.js objects are immutable. Still, `dayjs#clone` can create a clone of the current object if you need one.\n     * ```\n     * dayjs().clone()// => Dayjs\n     * dayjs(dayjs('2019-01-25')) // passing a Dayjs object to a constructor will also clone it\n     * ```\n     * Docs: https://day.js.org/docs/en/parse/dayjs-clone\n     */\n    clone(): Dayjs\n    /**\n     * This returns a `boolean` indicating whether the Day.js object contains a valid date or not.\n     * ```\n     * dayjs().isValid()// => boolean\n     * ```\n     * Docs: https://day.js.org/docs/en/parse/is-valid\n     */\n    isValid(): boolean\n    /**\n     * Get the year.\n     * ```\n     * dayjs().year()// => 2020\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/year\n     */\n    year(): number\n    /**\n     * Set the year.\n     * ```\n     * dayjs().year(2000)// => Dayjs\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/year\n     */\n    year(value: number): Dayjs\n    /**\n     * Get the month.\n     *\n     * Months are zero indexed, so January is month 0.\n     * ```\n     * dayjs().month()// => 0-11\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/month\n     */\n    month(): number\n    /**\n     * Set the month.\n     *\n     * Months are zero indexed, so January is month 0.\n     *\n     * Accepts numbers from 0 to 11. If the range is exceeded, it will bubble up to the next year.\n     * ```\n     * dayjs().month(0)// => Dayjs\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/month\n     */\n    month(value: number): Dayjs\n    /**\n     * Get the date of the month.\n     * ```\n     * dayjs().date()// => 1-31\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/date\n     */\n    date(): number\n    /**\n     * Set the date of the month.\n     *\n     * Accepts numbers from 1 to 31. If the range is exceeded, it will bubble up to the next months.\n     * ```\n     * dayjs().date(1)// => Dayjs\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/date\n     */\n    date(value: number): Dayjs\n    /**\n     * Get the day of the week.\n     *\n     * Returns numbers from 0 (Sunday) to 6 (Saturday).\n     * ```\n     * dayjs().day()// 0-6\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/day\n     */\n    day(): number\n    /**\n     * Set the day of the week.\n     *\n     * Accepts numbers from 0 (Sunday) to 6 (Saturday). If the range is exceeded, it will bubble up to next weeks.\n     * ```\n     * dayjs().day(0)// => Dayjs\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/day\n     */\n    day(value: number): Dayjs\n    /**\n     * Get the hour.\n     * ```\n     * dayjs().hour()// => 0-23\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/hour\n     */\n    hour(): number\n    /**\n     * Set the hour.\n     *\n     * Accepts numbers from 0 to 23. If the range is exceeded, it will bubble up to the next day.\n     * ```\n     * dayjs().hour(12)// => Dayjs\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/hour\n     */\n    hour(value: number): Dayjs\n    /**\n     * Get the minutes.\n     * ```\n     * dayjs().minute()// => 0-59\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/minute\n     */\n    minute(): number\n    /**\n     * Set the minutes.\n     *\n     * Accepts numbers from 0 to 59. If the range is exceeded, it will bubble up to the next hour.\n     * ```\n     * dayjs().minute(59)// => Dayjs\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/minute\n     */\n    minute(value: number): Dayjs\n    /**\n     * Get the seconds.\n     * ```\n     * dayjs().second()// => 0-59\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/second\n     */\n    second(): number\n    /**\n     * Set the seconds.\n     *\n     * Accepts numbers from 0 to 59. If the range is exceeded, it will bubble up to the next minutes.\n     * ```\n     * dayjs().second(1)// Dayjs\n     * ```\n     */\n    second(value: number): Dayjs\n    /**\n     * Get the milliseconds.\n     * ```\n     * dayjs().millisecond()// => 0-999\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/millisecond\n     */\n    millisecond(): number\n    /**\n     * Set the milliseconds.\n     *\n     * Accepts numbers from 0 to 999. If the range is exceeded, it will bubble up to the next seconds.\n     * ```\n     * dayjs().millisecond(1)// => Dayjs\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/millisecond\n     */\n    millisecond(value: number): Dayjs\n    /**\n     * Generic setter, accepting unit as first argument, and value as second, returns a new instance with the applied changes.\n     *\n     * In general:\n     * ```\n     * dayjs().set(unit, value) === dayjs()[unit](value)\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     * ```\n     * dayjs().set('date', 1)\n     * dayjs().set('month', 3) // April\n     * dayjs().set('second', 30)\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/set\n     */\n    set(unit: UnitType, value: number): Dayjs\n    /**\n     * String getter, returns the corresponding information getting from Day.js object.\n     *\n     * In general:\n     * ```\n     * dayjs().get(unit) === dayjs()[unit]()\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     * ```\n     * dayjs().get('year')\n     * dayjs().get('month') // start 0\n     * dayjs().get('date')\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/get\n     */\n    get(unit: UnitType): number\n    /**\n     * Returns a cloned Day.js object with a specified amount of time added.\n     * ```\n     * dayjs().add(7, 'day')// => Dayjs\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     *\n     * Docs: https://day.js.org/docs/en/manipulate/add\n     */\n    add(value: number, unit?: ManipulateType): Dayjs\n    /**\n     * Returns a cloned Day.js object with a specified amount of time subtracted.\n     * ```\n     * dayjs().subtract(7, 'year')// => Dayjs\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     *\n     * Docs: https://day.js.org/docs/en/manipulate/subtract\n     */\n    subtract(value: number, unit?: ManipulateType): Dayjs\n    /**\n     * Returns a cloned Day.js object and set it to the start of a unit of time.\n     * ```\n     * dayjs().startOf('year')// => Dayjs\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     *\n     * Docs: https://day.js.org/docs/en/manipulate/start-of\n     */\n    startOf(unit: OpUnitType): Dayjs\n    /**\n     * Returns a cloned Day.js object and set it to the end of a unit of time.\n     * ```\n     * dayjs().endOf('month')// => Dayjs\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     *\n     * Docs: https://day.js.org/docs/en/manipulate/end-of\n     */\n    endOf(unit: OpUnitType): Dayjs\n    /**\n     * Get the formatted date according to the string of tokens passed in.\n     *\n     * To escape characters, wrap them in square brackets (e.g. [MM]).\n     * ```\n     * dayjs().format()// => current date in ISO8601, without fraction seconds e.g. '2020-04-02T08:02:17-05:00'\n     * dayjs('2019-01-25').format('[YYYYescape] YYYY-MM-DDTHH:mm:ssZ[Z]')// 'YYYYescape 2019-01-25T00:00:00-02:00Z'\n     * dayjs('2019-01-25').format('DD/MM/YYYY') // '25/01/2019'\n     * ```\n     * Docs: https://day.js.org/docs/en/display/format\n     */\n    format(template?: string): string\n    /**\n     * This indicates the difference between two date-time in the specified unit.\n     *\n     * To get the difference in milliseconds, use `dayjs#diff`\n     * ```\n     * const date1 = dayjs('2019-01-25')\n     * const date2 = dayjs('2018-06-05')\n     * date1.diff(date2) // 20214000000 default milliseconds\n     * date1.diff() // milliseconds to current time\n     * ```\n     *\n     * To get the difference in another unit of measurement, pass that measurement as the second argument.\n     * ```\n     * const date1 = dayjs('2019-01-25')\n     * date1.diff('2018-06-05', 'month') // 7\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     *\n     * Docs: https://day.js.org/docs/en/display/difference\n     */\n    diff(date?: ConfigType, unit?: QUnitType | OpUnitType, float?: boolean): number\n    /**\n     * This returns the number of **milliseconds** since the Unix Epoch of the Day.js object.\n     * ```\n     * dayjs('2019-01-25').valueOf() // 1548381600000\n     * +dayjs(1548381600000) // 1548381600000\n     * ```\n     * To get a Unix timestamp (the number of seconds since the epoch) from a Day.js object, you should use Unix Timestamp `dayjs#unix()`.\n     *\n     * Docs: https://day.js.org/docs/en/display/unix-timestamp-milliseconds\n     */\n    valueOf(): number\n    /**\n     * This returns the Unix timestamp (the number of **seconds** since the Unix Epoch) of the Day.js object.\n     * ```\n     * dayjs('2019-01-25').unix() // 1548381600\n     * ```\n     * This value is floored to the nearest second, and does not include a milliseconds component.\n     *\n     * Docs: https://day.js.org/docs/en/display/unix-timestamp\n     */\n    unix(): number\n    /**\n     * Get the number of days in the current month.\n     * ```\n     * dayjs('2019-01-25').daysInMonth() // 31\n     * ```\n     * Docs: https://day.js.org/docs/en/display/days-in-month\n     */\n    daysInMonth(): number\n    /**\n     * To get a copy of the native `Date` object parsed from the Day.js object use `dayjs#toDate`.\n     * ```\n     * dayjs('2019-01-25').toDate()// => Date\n     * ```\n     */\n    toDate(): Date\n    /**\n     * To serialize as an ISO 8601 string.\n     * ```\n     * dayjs('2019-01-25').toJSON() // '2019-01-25T02:00:00.000Z'\n     * ```\n     * Docs: https://day.js.org/docs/en/display/as-json\n     */\n    toJSON(): string\n    /**\n     * To format as an ISO 8601 string.\n     * ```\n     * dayjs('2019-01-25').toISOString() // '2019-01-25T02:00:00.000Z'\n     * ```\n     * Docs: https://day.js.org/docs/en/display/as-iso-string\n     */\n    toISOString(): string\n    /**\n     * Returns a string representation of the date.\n     * ```\n     * dayjs('2019-01-25').toString() // 'Fri, 25 Jan 2019 02:00:00 GMT'\n     * ```\n     * Docs: https://day.js.org/docs/en/display/as-string\n     */\n    toString(): string\n    /**\n     * Get the UTC offset in minutes.\n     * ```\n     * dayjs().utcOffset()\n     * ```\n     * Docs: https://day.js.org/docs/en/manipulate/utc-offset\n     */\n    utcOffset(): number\n    /**\n     * This indicates whether the Day.js object is before the other supplied date-time.\n     * ```\n     * dayjs().isBefore(dayjs('2011-01-01')) // default milliseconds\n     * ```\n     * If you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n     * ```\n     * dayjs().isBefore('2011-01-01', 'year')// => boolean\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     *\n     * Docs: https://day.js.org/docs/en/query/is-before\n     */\n    isBefore(date: ConfigType, unit?: OpUnitType): boolean\n    /**\n     * This indicates whether the Day.js object is the same as the other supplied date-time.\n     * ```\n     * dayjs().isSame(dayjs('2011-01-01')) // default milliseconds\n     * ```\n     * If you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n     * ```\n     * dayjs().isSame('2011-01-01', 'year')// => boolean\n     * ```\n     * Docs: https://day.js.org/docs/en/query/is-same\n     */\n    isSame(date: ConfigType, unit?: OpUnitType): boolean\n    /**\n     * This indicates whether the Day.js object is after the other supplied date-time.\n     * ```\n     * dayjs().isAfter(dayjs('2011-01-01')) // default milliseconds\n     * ```\n     * If you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n     * ```\n     * dayjs().isAfter('2011-01-01', 'year')// => boolean\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     *\n     * Docs: https://day.js.org/docs/en/query/is-after\n     */\n    isAfter(date: ConfigType, unit?: OpUnitType): boolean\n\n    locale(): string\n\n    locale(preset: string | ILocale, object?: Partial<ILocale>): Dayjs\n  }\n\n  export type PluginFunc<T = unknown> = (option: T, c: typeof Dayjs, d: typeof dayjs) => void\n\n  export function extend<T = unknown>(plugin: PluginFunc<T>, option?: T): Dayjs\n\n  export function locale(preset?: string | ILocale, object?: Partial<ILocale>, isLocal?: boolean): string\n\n  export function isDayjs(d: any): d is Dayjs\n\n  export function unix(t: number): Dayjs\n\n  const Ls : { [key: string] :  ILocale }\n}\n";
export const jsonpath = "// Type definitions for jsonpath 0.2.11\r\n// Project: https://www.npmjs.org/package/jsonpath\r\n// Definitions by: Hiroki Horiuchi <https://github.com/horiuchi>, Ika <https://github.com/ikatyang>\r\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\r\n\r\ntype PathComponent = string | number;\r\n\r\n/**\r\n * Find elements in `obj` matching `pathExpression`. Returns an array of elements that\r\n * satisfy the provided JSONPath expression,or an empty array if none were matched.\r\n * Returns only first `count` elements if specified.\r\n */\r\nexport declare function query(obj: any, pathExpression: string, count?: number): any[];\r\n\r\n/**\r\n * Find paths to elements in `obj` matching `pathExpression`. Returns an array of\r\n * element paths that satisfy the provided JSONPath expression. Each path is itself an\r\n * array of keys representing the location within `obj` of the matching element. Returns\r\n * only first `count` paths if specified.\r\n */\r\nexport declare function paths(obj: any, pathExpression: string, count?: number): PathComponent[][];\r\n\r\n/**\r\n * Find elements and their corresponding paths in `obj` matching `pathExpression`.\r\n * Returns an array of node objects where each node has a `path` containing an array of\r\n * keys representing the location within `obj`, and a `value` pointing to the matched\r\n * element. Returns only first `count` nodes if specified.\r\n */\r\nexport declare function nodes(obj: any, pathExpression: string, count?: number): { path: PathComponent[]; value: any; }[];\r\n\r\n/**\r\n * Returns the value of the first element matching `pathExpression`. If `newValue` is\r\n * provided, sets the value of the first matching element and returns the new value.\r\n */\r\nexport declare function value(obj: any, pathExpression: string): any;\r\nexport declare function value<T>(obj: any, pathExpression: string, newValue: T): T;\r\n\r\n/**\r\n * Returns the parent of the first matching element.\r\n */\r\nexport declare function parent(obj: any, pathExpression: string): any;\r\n\r\n/**\r\n * Runs the supplied function `fn` on each matching element, and replaces each\r\n * matching element with the return value from the function. The function accepts the\r\n * value of the matching element as its only parameter. Returns matching nodes with\r\n * their updated values.\r\n */\r\nexport declare function apply(obj: any, pathExpression: string, fn: (x: any) => any): { path: PathComponent[]; value: any; }[];\r\n\r\n/**\r\n * Parse the provided JSONPath expression into path components and their associated\r\n * operations.\r\n */\r\nexport declare function parse(pathExpression: string): any[];\r\n\r\n/**\r\n * Returns a path expression in string form, given a path. The supplied path may either\r\n * be a flat array of keys, as returned by `jp.nodes` for example, or may alternatively be a\r\n * fully parsed path expression in the form of an array of path components as returned\r\n * by `jp.parse`.\r\n */\r\nexport declare function stringify(path: PathComponent[]): string;\r\n\r\nexport as namespace jsonpath;\r\n";
